import 'dart:convert';
import 'dart:io';

import 'package:drift_dev/src/analysis/results/results.dart';
import 'package:drift_dev/src/cli/cli.dart';
import 'package:drift_dev/src/cli/commands/schema.dart';
import 'package:drift_dev/src/cli/commands/schema/generate_utils.dart';
import 'package:drift_dev/src/cli/commands/schema/steps.dart';

import 'package:drift_dev/src/services/schema/schema_files.dart';
import 'package:io/ansi.dart';
import 'package:path/path.dart' as p;

class MakeMigrationCommand extends DriftCommand {
  MakeMigrationCommand(super.cli);

  @override
  String get description =>
      "Generates the scaffold for your migrations, an autogenerated test and a data integrity test.";

  @override
  String get name => "make-migrations";

  @override
  Future<void> run() async {
    if (p.isAbsolute(cli.project.options.schemaDir)) {
      cli.exit(
          '`schema_dir` must be a relative path. Remove the leading slash');
    }
    if (p.isAbsolute(cli.project.options.testDir)) {
      cli.exit('`test_dir` must be a relative path. Remove the leading slash');
    }

    /// The root directory where test files for all databases are stored
    /// e.g /test/drift/
    final rootSchemaDir = Directory(
        p.join(cli.project.directory.path, cli.project.options.schemaDir))
      ..createSync(recursive: true);

    /// The root directory where schema files for all databases are stored
    /// e.g /drift_schema/
    final rootTestDir = Directory(
        p.join(cli.project.directory.path, cli.project.options.testDir))
      ..createSync(recursive: true);

    if (cli.project.options.databases.isEmpty) {
      cli.logger.info(
          'No databases found in the build.yaml file. Check here to see how to add a database TODO: ADD LINK');
      exit(0);
    }

    final databaseMigrationsWriters =
        await Future.wait(cli.project.options.databases.entries.map(
      (entry) async {
        final writer = await _DatabaseMigrationWriter.create(
            cli: cli,
            rootSchemaDir: rootSchemaDir,
            rootTestDir: rootTestDir,
            dbName: entry.key,
            relativeDbClassPath: entry.value);
        return writer;
      },
    ));

    for (var writer in databaseMigrationsWriters) {
      cli.logger
          .info('Generating migration scaffold files for ${writer.dbName}');
      // Dump the schema files for all databases
      await writer.writeSchemaFile();
      writer.flush();
      // Write the step by step migration files for all databases
      // This is done after all the schema files have been written to the disk
      // to ensure that the schema files are up to date
      await writer.writeStepsFile();
      // Write the generated test databases
      await writer.writeTestDatabases();
      // Write the generated test
      await writer.writeTests();
      writer.flush();
    }
  }
}

/// Temporary class to store content to be written to the disk
class _WriteFileTask {
  final File file;
  final String content;
  final bool overwrite;

  _WriteFileTask(
      {required this.file, required this.content, this.overwrite = true});

  void write() => file.writeAsStringSync(content);
}

class _DatabaseMigrationWriter {
  final DriftDevCli cli;
  final Directory rootSchemaDir;
  final Directory rootTestDir;
  final String dbName;
  late final File dbClassFile;

  /// The directory where the schema files for this database are stored
  /// e.g /drift_schema/my_database/
  final Directory schemaDir;

  /// The directory where the tests for this database are stored
  /// e.g /test/drift/my_database/
  final Directory testDir;

  /// The directory where the generated test utils are stored
  /// e.g /test/drift/my_database/generated/
  final Directory testDatabasesDir;

  /// The directory where the generated test utils are stored
  /// e.g /test/drift/my_database/validation/
  final Directory validationModelsDir;

  /// Current schema version of the database
  final int schemaVersion;

  /// The name of the database class
  final String dbClassName;

  /// The parsed database class
  final DriftDatabase db;

  /// The parsed drift elements
  final List<DriftElement> driftElements;

  /// Stores the tempoarary files to be written to the disk
  /// Only is written to the disk once the entire generation process completes without errors
  final writeTasks = <_WriteFileTask>[];

  /// Write all the files to the disk
  void flush() {
    for (final task in writeTasks) {
      task.write();
    }
    writeTasks.clear();
  }

  /// All the schema files for this database
  Map<int, ExportedSchema> schemas;

  /// Migration writer for each migration
  List<_MigrationWriter> get migrations => _MigrationWriter.fromSchema(schemas);

  _DatabaseMigrationWriter({
    required this.cli,
    required this.rootSchemaDir,
    required this.rootTestDir,
    required this.dbName,
    required this.dbClassFile,
    required this.schemaDir,
    required this.testDir,
    required this.testDatabasesDir,
    required this.validationModelsDir,
    required this.schemaVersion,
    required this.dbClassName,
    required this.db,
    required this.driftElements,
    required this.schemas,
  });

  static Future<_DatabaseMigrationWriter> create(
      {required DriftDevCli cli,
      required Directory rootSchemaDir,
      required Directory rootTestDir,
      required String dbName,
      required String relativeDbClassPath}) async {
    if (p.isAbsolute(relativeDbClassPath)) {
      cli.exit(
          'The path for the "$dbName" database must be a relative path. Remove the leading slash');
    }
    final dbClassFile =
        File(p.join(cli.project.directory.path, relativeDbClassPath));
    final schemaDir = Directory(p.join(rootSchemaDir.path, dbName))
      ..createSync(recursive: true);
    final testDir = Directory(p.join(rootTestDir.path, dbName))
      ..createSync(recursive: true);
    final testDatabasesDir = Directory(p.join(testDir.path, 'schemas'))
      ..createSync(recursive: true);
    final validationModelsDir = Directory(p.join(testDir.path, 'validation'))
      ..createSync(recursive: true);
    final (:db, :elements, :schemaVersion) =
        await cli.readElementsFromSource(dbClassFile.absolute);
    if (schemaVersion == null) {
      cli.exit('Could not read schema version from the "$dbName" database.');
    }
    if (db == null) {
      cli.exit('Could not read database class from the "$dbName" database.');
    }
    final schemas = await parseSchema(schemaDir);
    return _DatabaseMigrationWriter(
        cli: cli,
        rootSchemaDir: rootSchemaDir,
        rootTestDir: rootTestDir,
        dbName: dbName,
        dbClassFile: dbClassFile,
        schemaDir: schemaDir,
        testDir: testDir,
        db: db,
        schemas: schemas,
        driftElements: elements,
        dbClassName: db.definingDartClass.toString(),
        testDatabasesDir: testDatabasesDir,
        validationModelsDir: validationModelsDir,
        schemaVersion: schemaVersion);
  }

  /// Create a .json dump of the current schema
  Future<void> writeSchemaFile() async {
    // If the latest schema file version is larger than the current schema version
    // then something is wrong
    if (schemas.keys.any((v) => v > schemaVersion)) {
      cli.exit(
          'The version of your $dbName database ($schemaVersion) is lower than the latest schema version. '
          'The schema version in the database should never be decreased. ');
    }

    final writer = SchemaWriter(driftElements, options: cli.project.options);
    final schemaFile = driftSchemaFile(schemaVersion);
    final content = json.encode(writer.createSchemaJson());
    if (!schemaFile.existsSync()) {
      cli.logger
          .info('$dbName: Creating schema file for version $schemaVersion');
      writeTasks.add(_WriteFileTask(file: schemaFile, content: content));
      // Re-parse the schema to include the newly created schema file
      schemas = await parseSchema(schemaDir);
    } else if (schemaFile.readAsStringSync() != content) {
      cli.exit(
          "A schema for version $schemaVersion of the $dbName database already exists and differs from the current schema."
          " Either delete the existing schema file or update the schema version in the database file.");
    }
  }

  /// Create a step by step migration file
  Future<void> writeStepsFile() async {
    cli.logger.info(
        '$dbName: Generating step by step migration in ${blue.wrap(p.relative(stepsFile.path))}');
    writeTasks.add(_WriteFileTask(
        file: stepsFile,
        content: StepsGenerationUtil.generateStepByStepMigration(schemas)));
  }

  /// Generate a built database for each schema version
  /// This will be used to test the migrations
  Future<void> writeTestDatabases() async {
    for (final versionAndEntities in schemas.entries) {
      final version = versionAndEntities.key;
      final entities = versionAndEntities.value;
      writeTasks.add(_WriteFileTask(
          file: testUtilityFile(version),
          content: GenerateUtils.generateSchemaCode(
              cli, version, entities, true, true)));
    }
    writeTasks.add(_WriteFileTask(
        file: File(p.join(testDatabasesDir.path, 'schema.dart')),
        content: GenerateUtils.generateLibraryCode(schemas.keys)));
  }

  Future<void> writeTests() async {
    final packageName = cli.project.buildConfig.packageName;
    final relativeDbPath = p.relative(dbClassFile.path,
        from: p.join(cli.project.directory.path, 'lib'));

    for (final migration in migrations) {
      // Generate the validation models
      final validationFile = File(p.join(validationModelsDir.path,
          'v${migration.from}_to_v${migration.to}.dart'));
      if (!validationFile.existsSync()) {
        cli.logger.info(
            '$dbName: Generating validation models in ${blue.wrap(p.relative(validationFile.path))}.'
            ' Fill this file with before and after data to test the data integrity of the migration');
        writeTasks.add(_WriteFileTask(
            file: validationFile, content: migration.validationModelsCode));
      }
    }

    final stepByStepTests = migrations
        .map((e) => e.testStepByStepMigrationCode(dbName, dbClassName));

    final code = """
// ignore_for_file: unused_local_variable, unused_import
// GENERATED CODE, DO NOT EDIT BY HAND.
import 'package:drift/drift.dart';
import 'package:drift_dev/api/migrations.dart';
import 'package:$packageName/$relativeDbPath';
import 'package:test/test.dart';
import 'schemas/schema.dart';

${stepByStepTests.map((e) => e.imports).expand((imports) => imports).toSet().join('\n')}

void main() {
  driftRuntimeOptions.dontWarnAboutMultipleDatabases = true;
  late SchemaVerifier verifier;

  setUpAll(() {
    verifier = SchemaVerifier(GeneratedHelper());
  });

  ${stepByStepTests.map((e) => e.test).join('\n')}

}
""";
    final testFile = File(p.join(testDir.path, 'migration_test.dart'));
    cli.logger.info(
        '$dbName: Generating test in ${blue.wrap(p.relative(testFile.path))}.'
        ' Run this test to validate that the migrations are correct');
    writeTasks.add(_WriteFileTask(file: testFile, content: code));
  }

  /// The json file where the schema for the current version of the database is stored
  File driftSchemaFile(int version) {
    return File(p.join(schemaDir.path, 'drift_schema_v$version.json'));
  }

  File testUtilityFile(int version) {
    return File(p.join(testDatabasesDir.path, 'schema_v$version.dart'));
  }

  /// Generated file where the step by step migration code is stored
  File get stepsFile {
    return File(dbClassFile.absolute.path
        .replaceFirst(RegExp(r'\.dart$'), '.steps.dart'));
  }
}

/// A writer that generates the code for a migration from one schema version to another
class _MigrationWriter {
  final List<DriftTable> tables;
  final int from;
  final int to;

  _MigrationWriter(this.tables, {required this.from, required this.to});

  /// Create  list of migration writers from a map of schema versions
  /// A migration writer is created for each pair of schema versions
  /// e.g (1,2), (2,3), (3,4) etc
  static List<_MigrationWriter> fromSchema(Map<int, ExportedSchema> schemas) {
    final result = <_MigrationWriter>[];
    if (schemas.length < 2) {
      return result;
    }
    final versions = schemas.keys.toList()..sort();
    for (var i = 0; i < versions.length - 1; i++) {
      final (from, fromSchema) = (versions[i], schemas[versions[i]]!);
      final (to, toSchema) = (versions[i + 1], schemas[versions[i + 1]]!);
      final fromTables = fromSchema.schema.whereType<DriftTable>();
      final toTables = toSchema.schema.whereType<DriftTable>();
      final commonTables = fromTables.where(
          (table) => toTables.any((t) => t.schemaName == table.schemaName));
      result.add(_MigrationWriter(commonTables.toList(), from: from, to: to));
    }
    return result;
  }

  /// Generate a step by step migration test
  /// This test will test the migration from version [from] to version [to]
  /// It will also import the validation models to test data integrity
  ({Set<String> imports, String test}) testStepByStepMigrationCode(
      String dbName, String dbClassName) {
    final imports = <String>{
      "import 'schemas/schema_v$from.dart' as v$from;",
      "import 'schemas/schema_v$to.dart' as v$to;",
      "import 'validation/v${from}_to_v$to.dart' as v${from}_to_v$to;"
    };

    final test = """
test(
  "$dbName - migrate from v$from to v$to",
  () => testStepByStepigrations(
    from: $from, to: $to, verifier: verifier, oldDbCallback: (e) => v$from.DatabaseAtV$from(e),
    newDbCallback: (e) => v$to.DatabaseAtV$to(e), currentDbCallback: (e) => $dbClassName(e),
    createItems: (b, oldDb) {
      ${tables.map(
      (table) {
        return "b.insertAll(oldDb.${table.dbGetterName}, v${from}_to_v$to.${table.dbGetterName}V$from);";
      },
    ).join('\n')}
    },
    validateItems: (newDb) async {
      ${tables.map(
      (table) {
        return "expect(v${from}_to_v$to.${table.dbGetterName}V$from, await newDb.select(newDb.${table.dbGetterName}).get());";
      },
    ).join('\n')}
    },
  )
);
""";
    return (imports: imports, test: test);
  }

  /// Generate the code for a file which users
  /// will fill in with before and after data
  /// to validate that the migration was successful and data was not lost
  String get validationModelsCode => """
import 'package:drift/drift.dart';
import '../schemas/schema_v$from.dart' as v$from;
import '../schemas/schema_v$to.dart' as v$to;

/// Fill these lists with data that should be present in the database before and after the migration
/// These lists will be used to validate that the migration was successful and that no data was lost
/// e.g. Validate what happens when a column is removed:
/// 
/// final usersV1 = [
///   User(id: Value(1), name: Value('Simon'), isAdmin: Value(false)),
///   User(id: Value(2), name: Value('John'), isAdmin: Value(false)),
/// ];
/// final usersV2 = [
///   User(id: Value(1), name: Value('Simon')),
///   User(id: Value(2), name: Value('John')),
/// ];
${tables.map((table) => """

final ${table.dbGetterName}V$from = <Insertable<v$from.${table.nameOfRowClass}>>[];
final ${table.dbGetterName}V$to = <Insertable<v$to.${table.nameOfRowClass}>>[];
""").join('\n')}

""";
}
